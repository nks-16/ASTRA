# -*- coding: utf-8 -*-
"""testing various model to see which is suitable for our model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJJSYUxM3vWsaZvhHgv3WNd14xizET2M
"""

# import the necessary packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec

# Load the dataset from the csv file using pandas
# best way is to mount the drive on colab and
# copy the path for the csv file
data = pd.read_csv("data.csv")

# Grab a peek at the data
data.head()

# Print the shape of the data
# data = data.sample(frac = 0.1, random_state = 48)
print(data.shape)
print(data.describe())

fraud = data[data['cik'] >= 1700]
valid = data[data['cik'] <= 1700]
print('Fraud Cases: {}'.format(len(data[data['cik'] >= 1700])))
print('Valid Transactions: {}'.format(len(data[data['cik'] <= 1700])))

print('grade details of the transaction')
fraud.total_grade.describe()

print('details of valid transaction')
valid.total_grade.describe()

# Using Scikit-learn to split data into training and testing sets
from sklearn.model_selection import train_test_split
# Split the data into training and testing sets
xTrain, xTest, yTrain, yTest = train_test_split(
        xData, yData, test_size = 0.2, random_state = 42)

# Building the Random Forest Classifier (RANDOM FOREST)
from sklearn.ensemble import RandomForestClassifier
# random forest model creation
rfc = RandomForestClassifier()
rfc.fit(xTrain, yTrain)
# predictions
yPred = rfc.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred:", yPred.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()
from sklearn.metrics import f1_score


f1 = f1_score(yTest, yPred)

print("F1 Score: ", f1)

import matplotlib.pyplot as plt

# Plotting the first 50 values for illustration
plt.figure(figsize=(12, 6))
plt.plot(range(len(yTest[:50])), yTest[:50], label="Actual", marker='o')
plt.plot(range(len(yPred[:50])), yPred[:50], label="Predicted", marker='x')
plt.xlabel("Sample Index")
plt.ylabel("Fraud Detection (0 = Non-fraud, 1 = Fraud)")
plt.title("Actual vs Predicted Values")
plt.legend()
plt.show()

from sklearn.linear_model import LogisticRegression

# Logistic Regression model creation
log_reg = LogisticRegression()
log_reg.fit(xTrain, yTrain)

# Predictions
yPred_log = log_reg.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_log:", yPred_log.shape)

import matplotlib.pyplot as plt

# Plotting the first 50 values for illustration
plt.figure(figsize=(12, 6))
plt.plot(range(len(yTest[:50])), yTest[:50], label="Actual", marker='o')
plt.plot(range(len(yPred_log[:50])), yPred[:50], label="Predicted", marker='x')
plt.xlabel("Sample Index")
plt.ylabel("Fraud Detection (0 = Non-fraud, 1 = Fraud)")
plt.title("Actual vs Predicted Values")
plt.legend()
plt.show()

from sklearn.svm import SVC

# SVM model creation
svm_model = SVC()
svm_model.fit(xTrain, yTrain)

# Predictions
yPred_svm = svm_model.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_svm:", yPred_svm.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_svm)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()
f1 = f1_score(yTest, yPred_svm)
print("F1 Score: ", f1)

import matplotlib.pyplot as plt

# Plotting the first 50 values for illustration
plt.figure(figsize=(12, 6))
plt.plot(range(len(yTest[:50])), yTest[:50], label="Actual", marker='o')
plt.plot(range(len(yPred_svm[:50])), yPred[:50], label="Predicted", marker='x')
plt.xlabel("Sample Index")
plt.ylabel("Fraud Detection (0 = Non-fraud, 1 = Fraud)")
plt.title("Actual vs Predicted Values")
plt.legend()
plt.show()

from sklearn.neighbors import KNeighborsClassifier

# KNN model creation
knn = KNeighborsClassifier(n_neighbors=5)  # You can tune n_neighbors
knn.fit(xTrain, yTrain)

# Predictions
yPred_knn = knn.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_knn:", yPred_knn.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_knn)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()
f1 = f1_score(yTest, yPred_knn)
print("F1 Score: ", f1)

from sklearn.tree import DecisionTreeClassifier

# Decision Tree model creation
dtc = DecisionTreeClassifier()
dtc.fit(xTrain, yTrain)

# Predictions
yPred_dtc = dtc.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_dtc:", yPred_dtc.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_dtc)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

from sklearn.ensemble import GradientBoostingClassifier

# Gradient Boosting model creation
gbc = GradientBoostingClassifier()
gbc.fit(xTrain, yTrain)

# Predictions
yPred_gbc = gbc.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_gbc:", yPred_gbc.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_gbc)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

from sklearn.naive_bayes import GaussianNB

# Naive Bayes model creation
nb = GaussianNB()
nb.fit(xTrain, yTrain)

# Predictions
yPred_nb = nb.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_nb:", yPred_nb.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_nb)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

from xgboost import XGBClassifier

# XGBoost model creation
xgb = XGBClassifier()
xgb.fit(xTrain, yTrain)

# Predictions
yPred_xgb = xgb.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_xgb:", yPred_xgb.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_xgb)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

from sklearn.neural_network import MLPClassifier

# ANN model creation
ann = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=300)  # Example structure
ann.fit(xTrain, yTrain)

# Predictions
yPred_ann = ann.predict(xTest)
print("Shape of yTest:", yTest.shape)
print("Shape of yPred_ann:", yPred_ann.shape)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate the confusion matrix
cm = confusion_matrix(yTest, yPred_ann)

# Plotting the confusion matrix
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rfc.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

from sklearn.metrics import accuracy_score

# Assuming yTest are the true labels and yPred are the predicted labels
a_r = accuracy_score(yTest, yPred)
a_l= accuracy_score(yTest, yPred_log)
a_s = accuracy_score(yTest, yPred_svm)
a_k = accuracy_score(yTest, yPred_knn)
a_d = accuracy_score(yTest, yPred_dtc)
a_g = accuracy_score(yTest, yPred_gbc)
# Print the accuracy
print("Accuracy: ", a_r)
print("Accuracy: ", a_l)
print("Accuracy: ", a_s)
print("Accuracy: ", a_k)
print("Accuracy: ", a_d)
print("Accuracy: ", a_g)